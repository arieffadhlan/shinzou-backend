openapi: 3.0.0
info:
  title: Shinzou Flight
  version: 1.0.0
tags:
  - name: Users
    description: Users API Collection
  - name: Ticket
    description: ticket API Collection
paths:
  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: budi
                email:
                  type: string
                  example: budi@gmail.com
                password:
                  type: string
                  example: budi124
        required: true
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: budi
                      email:
                        type: string
                        example: budi@gmail.com
        '400':
          description: Failed error because bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmptyName'
                  - $ref: '#/components/schemas/EmptyEmail'
                  - $ref: '#/components/schemas/MinimumPassword'
                  - $ref: '#/components/schemas/EmptyPassword'
              examples:
                emptyName:
                  summary: example empty name
                  value:
                    status: Fail
                    message: name can't be empty!
                emptyEmail:
                  summary: example empty email
                  value:
                    status: Fail
                    message: email can't be empty!
                minimumPassword:
                  summary: example minimum password
                  value:
                    status: Fail
                    message: minimum password must be 8 character or more!
                emptyEmailPassword:
                  summary: example empty password
                  value:
                    status: Fail
                    message: password can't be empty!
        '409':
          description: Failed because email already used
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmailAlreadyUsed'
              examples:
                EmailAlreadyUsed:
                  summary: example email already used
                  value:
                    status: FAIL
                    message: user with email budi@gmail.com already taken!
  /api/v1/users/login:
    post:
      tags:
        - Users
      summary: Login for user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: budi@gmail.com
                password:
                  type: string
                  example: budi124
        required: true
      responses:
        '200':
          description: Status login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  token:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY0NDRjOGI3LWQ0NzAtNGI0Yy04MTMxLTkzMDY3ZThmNWNhNCIsImVtYWlsIjoicGF1bEBnbWFpbC5jb20iLCJjcmVhdGVkQXQiOiIyMDIzLTA2LTA5VDExOjIxOjAxLjA2NFoiLCJ1cGRhdGVkQXQiOiIyMDIzLTA2LTA5VDExOjIxOjAxLjA2NFoiLCJpYXQiOjE2ODYzMDk2Nzd9.7Ap9ceFAssLLYenZI6pcqfhtgK6VufzGh0PZXLDEmLM
        '400':
          description: Failed error because bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmptyEmail'
                  - $ref: '#/components/schemas/EmptyPassword'
                  - $ref: '#/components/schemas/WrongPassword'
              examples:
                emptyEmail:
                  summary: example empty email
                  value:
                    status: FAIL
                    message: email can't be empty!
                emptyEmailPassword:
                  summary: example empty password
                  value:
                    status: FAIL
                    message: password can't be empty!
                wrongPassword:
                  summary: example wrong password
                  value:
                    status: FAIL
                    message: wrong password!
        '404':
          description: Failed error because user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user not found
  /api/v1/users/me:
    get:
      tags:
        - Users
      security:
        - bearerToken: []
      summary: Get user information
      description: to get information from the user who is currently logged in
      responses:
        '200':
          description: Status success get user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: budi
                      email:
                        type: string
                        example: budi@gmail.com
        '400':
          description: Failed error because bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RequiredAuth'
              examples:
                requiredAuth:
                  summary: example empty bearer token
                  value:
                    status: FAIL
                    message: required authorization!
        '498':
          description: Failed because token error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidToken'
              examples:
                invalidToken:
                  summary: example invalid token
                  value:
                    status: FAIL
                    message: invalid token
  /api/v1/Ticket:
    post:
      tags:
        - Ticket
      security:
        - bearerToken: []
      summary: Create Ticket data
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id :
                  type: string
                  example: 603a1aa6-c3c9-4bff-84fa-f32bfcd554c5
                airport_origin :
                  type: string
                  example: Soekarno Hatta
                origin_location:
                  type: string
                  example: Jakarta
                destination :
                  type: string
                  example: Paris
                departure_time:
                  type: string
                  example: July 20, 2023 20:17:40 GMT+07:00
                arrival_time:
                  type: string
                  example: July 21, 2023 23:25:00 GMT+07:00
                booking_code:
                  type: string
                  example: 1234x6JKL
                class :
                  type: string
                  example: economy
                price:
                  type: integer
                  example: 2000000
                available:
                  type: boolean
                  example: true
        required: true
      responses:
        '201':
          description: Ticket succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      id :
                        type: string
                        example: 603a1aa6-c3c9-4bff-84fa-f32bfcd554c5
                      airport_origin :
                        type: string
                        example: Soekarno Hatta
                      origin_location:
                        type: string
                        example: Jakarta
                      destination :
                        type: string
                        example: Paris
                      departure_time:
                        type: string
                        example: July 20, 2023 20:17:40 GMT+07:00
                      arrival_time:
                        type: string
                        example: July 21, 2023 23:25:00 GMT+07:00
                      booking_code:
                        type: string
                        example: 1234x6JKL
                      class :
                        type: string
                        example: economy
                      price:
                        type: integer
                        example: 2000000
                      available:
                        type: boolean
                        example: true
                      updatedAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
                      createdAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
        '403':
          description: Failed error because forbidden access
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DontHavePermit'
              examples:
                dontHavePermit:
                  summary: example invalid role access
                  value:
                    status: FAIL
                    message: You don't have permission to access!
  /api/v1/Ticket/{id}:
    get:
      tags:
        - Ticket
      security:
        - bearerToken: []
      summary: Get Ticket by id
      description: To retrive Ticket by id
      parameters:
        - name: id
          in: path
          description: ID of the Ticket
          required: true
          schema:
            type: string
      responses:
        '200':
          description: If data successfully retrived
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      id :
                        type: string
                        example: 603a1aa6-c3c9-4bff-84fa-f32bfcd554c5
                      airport_origin:
                        type: string
                        example: Soekarno Hatta
                      origin_location:
                        type: string
                        example: Jakarta
                      destination:
                        type: string
                        example: Paris
                      departure_time:
                        type: string
                        example: July 20, 2023 20:17:40 GMT+07:00
                      arrival_time:
                        type: string
                        example: July 21, 2023 23:25:00 GMT+07:00
                      booking_code:
                        type: string
                        example: 1234x6JKL
                      class :
                        type: string
                        example: economy
                      price:
                        type: integer
                        example: 2000000
                      available:
                        type: boolean
                        example: true
                      updatedAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
                      createdAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
        '404':
          description: If failed to retrive the data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  message:
                    type: string
                    example: Ticket not found!
    put:
      tags:
        - Ticket
      security:
        - bearerToken: []
      summary: Update a Ticket
      description: To update a Ticket by id
      parameters:
        - name: id
          in: path
          description: ID of the Ticket
          required: true
          schema:
            properties:
              id:
                type: string
                example: 603a1aa6-c3c9-4bff-84fa-f32bfcd554c5
      requestBody:
        content:
          application/json:
            schema:
              properties:
                      airport_origin:
                        type: string
                        example: Soekarno Hatta
                      origin_location:
                        type: string
                        example: Jakarta
                      destination:
                        type: string
                        example: Paris
                      departure_time:
                        type: string
                        example: July 20, 2023 20:17:40 GMT+07:00
                      arrival_time:
                        type: string
                        example: July 21, 2023 23:25:00 GMT+07:00
                      booking_code:
                        type: string
                        example: 1234x6JKL
                      class :
                        type: string
                        example: economy
                      price:
                        type: integer
                        example: 1000000
                      available:
                        type: boolean
                        example: true
        required: true
      responses:
        '200':
          description: If data successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      id :
                        type: string
                        example: 603a1aa6-c3c9-4bff-84fa-f32bfcd554c5
                      airport_origin:
                        type: string
                        example: Soekarno Hatta
                      origin_location:
                        type: string
                        example: Jakarta
                      destination:
                        type: string
                        example: Paris
                      departure_time:
                        type: string
                        example: July 20, 2023 20:17:40 GMT+07:00
                      arrival_time:
                        type: string
                        example: July 21, 2023 23:25:00 GMT+07:00
                      booking_code:
                        type: string
                        example: 1234x6JKL
                      class :
                        type: string
                        example: economy
                      price:
                        type: integer
                        example: 2000000
                      available:
                        type: boolean
                        example: true
                      updatedAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
                      createdAt:
                        type: string
                        example: '2023-05-04 00:31:02.934+07'
        '403':
          description: Failed error because forbidden access
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DontHavePermit'
              examples:
                dontHavePermit:
                  summary: example invalid role access
                  value:
                    status: FAIL
                    message: You don't have permission to access!
        '404':
          description: If failed to retrive the data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  message:
                    type: string
                    example: Ticket not found!
    delete:
      tags:
        - Ticket
      security:
        - bearerToken: []
      summary: Delete a Ticket
      description: To delete a Ticket by id
      parameters:
        - name: id
          in: path
          description: ID of the Ticket
          required: true
          schema:
            properties:
              id:
                type: string
                example: b10d07a7-de6b-4063-9772-515588992e47
      responses:
        '200':
          description: If data successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Success
        '403':
          description: Failed error because forbidden access
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DontHavePermit'
              examples:
                dontHavePermit:
                  summary: example invalid role access
                  value:
                    status: FAIL
                    message: You don't have permission to access!
        '404':
          description: If failed to retrive the data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  message:
                    type: string
                    example: Ticket not found!
components:
  schemas:
    RequiredAuth:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    DontHavePermit:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    InvalidToken:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    EmptyName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    EmptyEmail:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    EmailAlreadyUsed:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    MinimumPassword:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    EmptyPassword:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    WrongPassword:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
  securitySchemes:
    bearerToken:
      description: 'Note: Token required, you may to login first then paste token code here'
      type: http
      scheme: bearer
      bearerFormat: JWT
